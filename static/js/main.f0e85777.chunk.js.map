{"version":3,"sources":["index.js"],"names":["SaveDialogueButton","className","onClick","this","props","React","Component","ClearDialogueButton","DialogueButtonsContainer","sentences","currentDialogueTitle","onSaveClick","onClearClick","Sentence","sentence","speaker","DialogueText","forEach","i","push","line","CurrentSpeakerText","currentSpeakerText","currentSpeakerIsA","DialogueContainer","onSaveDialogue","onClearDialogue","onLoadClick","onLoadDialogue","DialogueTitle","value","onChange","placeholder","CurrentSpeakerTracker","CurrentSpeakerInput","id","type","SwitchCurrentSpeakerButton","InputContainer","state","handleCurrentSpeakerTyping","bind","handleSwitchSpeaker","handleGiveDialogueTitle","e","onCurrentSpeakerTyping","onSwitchSpeaker","onGiveDialogueTitle","LoadSavedDialogueButton","datatitle","DeleteSavedDialogueButton","SavedDialogueTitle","title","SavedDialogueListItem","onDeleteDialogue","SavedDialogueList","savedDialoguesString","localStorage","getItem","console","log","savedDialoguesArray","split","savedDialoguesList","nanoid","WriteNewDialogueButton","ViewSavedDialoguesButton","ToggleViewButtons","writeButtonStyle","onWritingViewClick","loadButtonStyle","onSavedDialogueViewClick","Header","AppContainer","dialogueTitleList","numberOfDialogues","nextLine","isViewingSavedDialogues","handleSwitchToWritingView","handleSwitchToSavedDialoguesView","handleSaveDialogue","handleClearDialogue","handleLoadDialogue","handleDeleteDialogue","savedDialogueListItems","document","querySelectorAll","setState","target","currentSpeakerInput","getElementById","concat","focus","includes","alert","dialogue","stringDialogue","JSON","stringify","setItem","storedDialogue","parse","getAttribute","length","thisDialogueTitle","updatedDialogueList","filter","updatedDialogueString","join","undefined","removeItem","existingStorage","dialogues","handleFindNumberOfDialogues","ReactDom","render"],"mappings":"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","file":"static/js/main.f0e85777.chunk.js","sourcesContent":["// a JS file, yay!\r\nimport React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport './index.css';\r\nimport { nanoid } from 'nanoid';\r\n// import App from './App';\r\n\r\n/*\r\n\tdialogue control buttons section\r\n*/\r\n\r\nclass SaveDialogueButton extends React.Component {\r\n\trender() {\r\n\r\n\t\treturn(\r\n\t\t\t<button \r\n\t\t\t\tclassName=\"dialogue-button save-button\"\r\n\t\t\t\tonClick={this.props.onClick}\r\n\t\t\t>\r\n\t\t\t\tSave Dialogue\r\n\t\t\t</button>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nclass ClearDialogueButton extends React.Component {\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"dialogue-button clear-button\"\r\n\t\t\t\tonClick={this.props.onClick}\r\n\t\t\t>\r\n\t\t\t\tClear Dialogue\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass DialogueButtonsContainer extends React.Component {\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div className=\"save-button-container\">\r\n\t\t\t\t<SaveDialogueButton \r\n\t\t\t\t\tsentences={this.props.sentences}\r\n\t\t\t\t\tcurrentDialogueTitle={this.props.currentDialogueTitle}\r\n\t\t\t\t\tonClick={this.props.onSaveClick}\r\n\t\t\t\t/>\r\n\t\t\t\t<ClearDialogueButton \r\n\t\t\t\t\tsentences={this.props.sentences}\r\n\t\t\t\t\tonClick={this.props.onClearClick}\r\n\t\t\t\t/>\r\n\t\t\t\t{/*<LoadDialogueButton \r\n\t\t\t\t\tsentences={this.props.sentences}\r\n\t\t\t\t\tonClick={this.props.onLoadClick}\r\n\t\t\t\t/>*/}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n} \r\n\r\n/*\r\n\tdisplay current dialogue section\r\n*/\r\n\r\nclass Sentence extends React.Component {\r\n\trender() {\r\n\t\tconst sentence = this.props.sentence;\r\n\t\tconst speaker = this.props.speaker;\r\n\t\treturn (\r\n\t\t\t<div className=\"dialogue-line\">\r\n\t\t\t\t<p className=\"dialogue-speaker\">{speaker}: </p>\r\n\t\t\t\t<p className=\"dialogue-sentence\">{sentence}</p>\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass DialogueText extends React.Component {\r\n\trender() {\r\n\t\tconst sentences = [];\r\n\t\t// const nextLine = this.props.nextLine;\r\n\t\tthis.props.sentences.forEach((sentence, i) => {\r\n\t\t\tsentences.push(\r\n\t\t\t\t<Sentence\r\n\t\t\t\t\tspeaker={sentence.speaker}\r\n\t\t\t\t\tsentence={sentence.line}\r\n\t\t\t\t\tkey={i}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\t});\r\n\r\n\t\treturn(\r\n\t\t\t<div \r\n\t\t\t\tclassName=\"dialogue-text\"\r\n\t\t\t>\r\n\t\t\t\t{sentences}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nclass CurrentSpeakerText extends React.Component {\r\n\trender() {\r\n\t\tconst currentSpeakerText = this.props.currentSpeakerText\r\n\t\tconst currentSpeakerIsA = \"Speaker \" + (this.props.currentSpeakerIsA ? \"A\" : \"B\") + \": \"\r\n\t\treturn(\r\n\t\t\t<p>{currentSpeakerIsA + \" \" + currentSpeakerText}</p>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass DialogueContainer extends React.Component {\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<section className=\"dialogue-section\">\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<DialogueButtonsContainer \r\n\t\t\t\t\t\tsentences={this.props.sentences}\r\n\t\t\t\t\t\tcurrentDialogueTitle={this.props.currentDialogueTitle}\r\n\t\t\t\t\t\tonSaveClick={this.props.onSaveDialogue}\r\n\t\t\t\t\t\tonClearClick={this.props.onClearDialogue}\r\n\t\t\t\t\t\tonLoadClick={this.props.onLoadDialogue}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<DialogueText \r\n\t\t\t\t\t\tsentences={this.props.sentences}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<CurrentSpeakerText \r\n\t\t\t\t\t\tcurrentSpeakerText={this.props.currentSpeakerText}\r\n\t\t\t\t\t\tcurrentSpeakerIsA={this.props.currentSpeakerIsA}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</section>\r\n\r\n\t\t);\r\n\t}\r\n}\r\n\r\n/*\r\n\twrite dialogue section\r\n*/\r\n\r\nclass DialogueTitle extends React.Component {\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div className=\"dialogue-title-container\">\r\n\t\t\t\t<label>\r\n\t\t\t\t\tWhat is the title? \r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tvalue={this.props.currentDialogueTitle}\r\n\t\t\t\t\t\tonChange={this.props.onChange}\r\n\t\t\t\t\t\tplaceholder=\"Title...\"\r\n\t\t\t\t\t></input>\r\n\t\t\t\t</label>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nclass CurrentSpeakerTracker extends React.Component {\r\n\trender() {\r\n\t\tconst currentSpeakerIsA = this.props.currentSpeakerIsA;\r\n\t\treturn(\r\n\r\n\t\t\t<p>Current speaker: {currentSpeakerIsA ? \"A\" : \"B\"}</p>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nclass CurrentSpeakerInput extends React.Component {\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<textarea\r\n\t\t\t\tid=\"currentSpeakerInput\"\r\n\t\t\t\tclassName=\"speaker-input-textarea\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tplaceholder={\"What do you want to say?\"}\r\n\t\t\t\tvalue={this.props.currentSpeakerText}\r\n\t\t\t\tonChange={this.props.onChange}\r\n\t\t\t>\r\n\t\t\t</textarea>\r\n\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass SwitchCurrentSpeakerButton extends React.Component {\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<button \r\n\t\t\t\t// type=\"submit\"\r\n\t\t\t\tclassName=\"speaker-input-button\"\r\n\t\t\t\tonClick={this.props.onClick}\r\n\t\t\t>\r\n\t\t\tSubmit\r\n\t\t\t</button>\r\n\r\n\t\t)\r\n\t}\r\n}\r\n\r\nclass InputContainer extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tcurrentSpeakerText: '',\r\n\t\t}\r\n\t\tthis.handleCurrentSpeakerTyping = this.handleCurrentSpeakerTyping.bind(this);\r\n\t\tthis.handleSwitchSpeaker = this.handleSwitchSpeaker.bind(this);\r\n\t\tthis.handleGiveDialogueTitle = this.handleGiveDialogueTitle.bind(this);\r\n\t}\r\n\r\n\thandleCurrentSpeakerTyping(e) {\r\n\t\tthis.props.onCurrentSpeakerTyping(e)\r\n\t}\r\n\r\n\thandleSwitchSpeaker() {\r\n\t\tthis.props.onSwitchSpeaker()\r\n\t}\r\n\r\n\thandleGiveDialogueTitle(e) {\r\n\t\tthis.props.onGiveDialogueTitle(e)\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<section className=\"dialogue-inputs-container\">\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<h2>New Dialogue</h2>\r\n\t\t\t\t\t<DialogueTitle \r\n\t\t\t\t\t\tcurrentDialogueTitle={this.props.currentDialogueTitle}\r\n\t\t\t\t\t\tonChange={this.handleGiveDialogueTitle}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<CurrentSpeakerTracker \r\n\t\t\t\t\t\tcurrentSpeakerIsA={this.props.currentSpeakerIsA}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div className=\"speaker-inputs\">\r\n\t\t\t\t\t\t<CurrentSpeakerInput \r\n\t\t\t\t\t\t\tcurrentSpeakerText={this.props.currentSpeakerText}\r\n\t\t\t\t\t\t\tonChange={this.handleCurrentSpeakerTyping}\r\n\t\t\t\t\t\t\tvalue={this.props.currentSpeakerText}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<SwitchCurrentSpeakerButton \r\n\t\t\t\t\t\t\tonClick={this.handleSwitchSpeaker}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</section>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n/*\r\n\tsaved dialogue list section\r\n*/\r\n\r\n\r\nclass LoadSavedDialogueButton extends React.Component {\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<button \r\n\t\t\t\tclassName=\"saved-dialogue-list-load-button\"\r\n\t\t\t\tdatatitle={this.props.datatitle}\r\n\t\t\t\tonClick={this.props.onClick}\r\n\t\t\t>\r\n\t\t\t\tload\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass DeleteSavedDialogueButton extends React.Component {\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"saved-dialogue-list-delete-button\"\r\n\t\t\t\tdatatitle={this.props.datatitle}\r\n\t\t\t\tonClick={this.props.onClick}\r\n\r\n\t\t\t>\r\n\t\t\t\tdelete\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass SavedDialogueTitle extends React.Component {\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t\t<p>{this.props.title}</p>\t\r\n\t\t)\r\n\t}\r\n}\r\n\r\nclass SavedDialogueListItem extends React.Component {\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div className=\"saved-dialogue-list-item\">\r\n\t\t\t\t<SavedDialogueTitle \r\n\t\t\t\t\ttitle={this.props.title}\r\n\t\t\t\t/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<LoadSavedDialogueButton\r\n\t\t\t\t\t\t// key={nanoid()} \r\n\t\t\t\t\t\tonClick={this.props.onLoadDialogue}\r\n\t\t\t\t\t\tdatatitle={this.props.title}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<DeleteSavedDialogueButton \r\n\t\t\t\t\t\t// key={nanoid()}\r\n\t\t\t\t\t\tonClick={this.props.onDeleteDialogue}\r\n\t\t\t\t\t\tdatatitle={this.props.title}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass SavedDialogueList extends React.Component {\r\n\trender() {\r\n\t\tconst savedDialoguesString = localStorage.getItem('dialogue_list');\r\n\t\tconsole.log(savedDialoguesString);\r\n\t\tif (savedDialoguesString === null) {\r\n\t\t\treturn(\r\n\t\t\t\t<section className=\"saved-dialogue-list\">\r\n\t\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t\t<h2>Saved Dialogues</h2>\r\n\t\t\t\t\t\t<p>There are no dialogues</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</section>\r\n\t\t\t)\r\n\t\t} else {\t\r\n\t\t\tconst savedDialoguesArray = savedDialoguesString.split(', ')\r\n\t\t\tconst savedDialoguesList = [];\r\n\r\n\t\t\tsavedDialoguesArray.forEach((title, i) => {\r\n\t\t\t\tsavedDialoguesList.push(\r\n\t\t\t\t\t<SavedDialogueListItem \r\n\t\t\t\t\t\tkey={nanoid()}\r\n\t\t\t\t\t\ttitle={title}\r\n\t\t\t\t\t\tonLoadDialogue={this.props.onLoadDialogue}\r\n\t\t\t\t\t\tonDeleteDialogue={this.props.onDeleteDialogue}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t\r\n\t\t\t\t)\r\n\t\t\t}) \r\n\r\n\t\t\treturn(\r\n\t\t\t\t<section className=\"saved-dialogue-list\">\r\n\t\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t\t<h2>Saved Dialogues</h2>\r\n\t\t\t\t\t\t{savedDialoguesList}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</section>\r\n\t\t\t)\r\n\t\t}\r\n\t} \r\n}\r\n\r\n\r\n\r\nclass WriteNewDialogueButton extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<button\r\n\t\t\t\tclassName={this.props.className}\r\n\t\t\t\tonClick={this.props.onClick}\r\n\t\t\t>\r\n\t\t\twrite dialogue\r\n\t\t\t</button>\t\t\r\n\t\t)\t\t\r\n\t}\r\n}\r\n\r\nclass ViewSavedDialoguesButton extends React.Component {\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<button\r\n\t\t\t\tclassName={this.props.className}\r\n\t\t\t\tonClick={this.props.onClick}\r\n\t\t\t>\r\n\t\t\tload dialogue\r\n\t\t\t</button>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nclass ToggleViewButtons extends React.Component {\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<section className=\"app-view-toggles\">\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<p>What do you want to do?</p>\r\n\t\t\t\t\t<div className=\"view-toggle-button-wrapper\">\r\n\t\t\t\t\t\t<WriteNewDialogueButton \r\n\t\t\t\t\t\t\tclassName={this.props.writeButtonStyle}\r\n\t\t\t\t\t\t\tonClick={this.props.onWritingViewClick}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<ViewSavedDialoguesButton \r\n\t\t\t\t\t\t\tclassName={this.props.loadButtonStyle}\r\n\t\t\t\t\t\t\tonClick={this.props.onSavedDialogueViewClick}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</section>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass Header extends React.Component {\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<section className=\"app-header\">\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t\r\n\t\t\t\t\t<h1>Scriptt</h1>\r\n\t\t\t\t\t<p className=\"description-text\">\r\n\t\t\t\t\t\tWrite quick and easy dialogues for your language classes.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t</section>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass AppContainer extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tsentences: [],\r\n\t\t\tcurrentDialogueTitle: '',\r\n\t\t\tdialogueTitleList: localStorage.getItem('dialogue_list'),\r\n\t\t\tnumberOfDialogues: this.props.numberOfDialogues,\r\n\t\t\tnextLine: '',\r\n\t\t\tcurrentSpeakerIsA: true,\r\n\t\t\tcurrentSpeakerText: '',\r\n\t\t\tisViewingSavedDialogues: false,\r\n\t\t\twriteButtonStyle: 'view-toggle-button-selected left',\r\n\t\t\tloadButtonStyle: 'view-toggle-button right'\r\n\t\t}\r\n\t\t// functions to toggle between views\r\n\t\tthis.handleSwitchToWritingView = this.handleSwitchToWritingView.bind(this);\r\n\t\tthis.handleSwitchToSavedDialoguesView = this.handleSwitchToSavedDialoguesView.bind(this);\r\n\t\t// function to give dialogue title\r\n\t\tthis.handleGiveDialogueTitle = this.handleGiveDialogueTitle.bind(this);\r\n\t\t// function to capture current speaker's text\r\n\t\tthis.handleCurrentSpeakerTyping = this.handleCurrentSpeakerTyping.bind(this);\r\n\t\t// function to toggle between speakers\r\n\t\tthis.handleSwitchSpeaker = this.handleSwitchSpeaker.bind(this);\r\n\t\t// function to save dialogue\r\n\t\tthis.handleSaveDialogue = this.handleSaveDialogue.bind(this);\r\n\t\t// function to clear dialogue\r\n\t\tthis.handleClearDialogue = this.handleClearDialogue.bind(this);\r\n\t\t// function to load old dialogue\r\n\t\tthis.handleLoadDialogue = this.handleLoadDialogue.bind(this);\r\n\t\t// function to delete old dialogue\r\n\t\tthis.handleDeleteDialogue = this.handleDeleteDialogue.bind(this);\r\n\t}\r\n\r\n\t// functions to toggle between \"write dialogue\" and \"see saved dialogues\" views\r\n\r\n\t\r\n\r\n\thandleSwitchToWritingView() {\r\n\t\tconst savedDialogueListItems = document.querySelectorAll('.saved-dialogue-list-item')\r\n\t\tconsole.log(savedDialogueListItems)\r\n\t\t// savedDialogueListItems.forEach((item) => {\r\n\t\t// \titem.classList.add('slide-off')\r\n\t\t// })\r\n\r\n\t\tasync function slideOut() {\r\n\t\t\tsavedDialogueListItems.forEach((item, index) => {\r\n\t\t\t\tsetTimeout(async function changeClass() {\r\n\t\t\t\t\t\titem.classList.add('slide-off')\r\n\t\t\t\t\t}, index * 200)\t\r\n\t\t\t// setTimeout(function(){\r\n\t\t\t// \titem.classList.add('slide-off')\t\r\n\t\t\t// }, 1000)\r\n\t\t\t})\r\n\t\t\tawait delay\r\n\t\t}\r\n\r\n\t\tasync function delay() {\r\n\t\t\tconsole.log('done')\r\n\t\t}\r\n\t\t// slideOut().then(delay)\r\n\r\n\t\t// async function changeState() {\r\n\t\t// \tconsole.log(\"done\")\r\n\t\t// }\r\n\r\n\t\t// slideOut().then(changeState)\r\n\t\tthis.setState({\r\n\t\t\tisViewingSavedDialogues: false,\r\n\t\t\twriteButtonStyle: 'view-toggle-button-selected left',\r\n\t\t\tloadButtonStyle: 'view-toggle-button right'\r\n\t\t})\r\n\t}\r\n\r\n\thandleSwitchToSavedDialoguesView() {\r\n\t\tthis.setState({\r\n\t\t\tisViewingSavedDialogues: true,\r\n\t\t\twriteButtonStyle: 'view-toggle-button left',\r\n\t\t\tloadButtonStyle: 'view-toggle-button-selected right'\r\n\t\t})\r\n\t}\r\n\r\n\thandleGiveDialogueTitle(e) {\r\n\t\t// it is going to be the same as above\r\n\t\t// console.log(\"You are setting the title!\")\r\n\t\tthis.setState({\r\n\t\t\tcurrentDialogueTitle: e.target.value\r\n\t\t})\r\n\t}\r\n\r\n\thandleCurrentSpeakerTyping(e) {\r\n\t\t// console.log(e.target.value)\r\n\t\tthis.setState({\r\n\t\t\tcurrentSpeakerText: e.target.value,\r\n\t\t})\r\n\t}\r\n\r\n\thandleSwitchSpeaker() {\r\n\t\tconst currentSpeakerInput = document.getElementById('currentSpeakerInput');\r\n\r\n\t\tif (!this.state.currentSpeakerIsA) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tsentences: this.state.sentences.concat([{line: this.state.currentSpeakerText, speaker: (this.state.currentSpeakerIsA ? \"A\" : \"B\")}]),\r\n\t\t\t\tcurrentSpeakerIsA: true,\r\n\t\t\t\tcurrentSpeakerText: ''\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tthis.setState({\r\n\t\t\t\tsentences: this.state.sentences.concat({line: this.state.currentSpeakerText, speaker: (this.state.currentSpeakerIsA ? \"A\" : \"B\")}),\r\n\t\t\t\tcurrentSpeakerIsA: false,\r\n\t\t\t\tcurrentSpeakerText: ''\r\n\t\t\t})\r\n\t\t}\r\n\t\tcurrentSpeakerInput.focus();\r\n\t}\r\n\r\n\thandleSaveDialogue() {\r\n\t\t// check if there are 5 dialogues in local storage\r\n\t\tif (!(this.state.numberOfDialogues < 5)) {\r\n\t\t\talert(\"you already have 5 dialogues, please delete one before making more\")\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tconsole.log(\"you can still save dialogues\")\r\n\t\t}\r\n\r\n\t\t// check if the title is taken\r\n\t\tconsole.log(this.state.currentDialogueTitle)\r\n\t\tconsole.log(this.state.dialogueTitleList)\r\n\t\tif (this.state.currentDialogueTitle === \"\") {\r\n\t\t\talert(\"You need to give your dialogue a title\")\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// check if the dialogue list is empty \r\n\t\t// and check if the dialogue is already in the list\r\n\t\tif (this.state.dialogueTitleList !== null && this.state.dialogueTitleList.includes(this.state.currentDialogueTitle)) {\r\n\t\t\talert(\"This title is already in your saved dialogue list. This new dialogue will save over the old one.\")\r\n\t\t\tlet dialogue = this.state.sentences;\r\n\t\t\tlet currentDialogueTitle = this.state.currentDialogueTitle\r\n\t\t\tlet stringDialogue = JSON.stringify(dialogue);\r\n\t\t\tlocalStorage.setItem(currentDialogueTitle, stringDialogue);\r\n\t\t\talert(\"You saved your dialogue\")\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Part 1: update the list of dialogue titles\r\n\t\t// grab the current dialogue title\r\n\t\tlet currentDialogueTitle = this.state.currentDialogueTitle\r\n\t\t// console.log(currentDialogueTitle)\r\n\r\n\t\t// grab the previous updated title list\r\n\t\tlet dialogueTitleList = this.state.dialogueTitleList\r\n\t\t// console.log(dialogueTitleList)\r\n\r\n\t\t// buggy behavior, if list null needs to be set to empty string..\r\n\t\t// something needs to be fixed here\r\n\t\tif (this.state.dialogueTitleList === null) {\r\n\t\t\tdialogueTitleList = ''\r\n\t\t}\r\n\r\n\t\t// add the current title to the previous title list\r\n\t\tif (dialogueTitleList === '') {\r\n\t\t\tdialogueTitleList += currentDialogueTitle;\r\n\t\t} else {\r\n\t\t\tdialogueTitleList += `, ${currentDialogueTitle}`;\r\n\t\t}\r\n\r\n\t\t// set title list state to the newly updated title list\r\n\t\tthis.setState({\r\n\t\t\tdialogueTitleList: dialogueTitleList,\r\n\t\t\tnumberOfDialogues: this.state.numberOfDialogues + 1\r\n\t\t})\r\n\r\n\t\t// store the newly updated title list on top of \r\n\t\t// the previously stored \"dialogue_list\"\r\n\t\tlocalStorage.setItem(\"dialogue_list\", dialogueTitleList)\r\n\r\n\t\t// Part 2: store the current dialogue\r\n\t\t// console.log(dialogueTitleList)\r\n\t\tlet dialogue = this.state.sentences;\r\n\t\tlet stringDialogue = JSON.stringify(dialogue);\r\n\t\tlocalStorage.setItem(currentDialogueTitle, stringDialogue);\r\n\t\talert(\"You saved your dialogue\")\r\n\t}\r\n\r\n\thandleClearDialogue() {\r\n\t\tconsole.log(\"The clear button works!\")\r\n\t\tthis.setState({\r\n\t\t\tsentences: [],\r\n\t\t\tcurrentSpeakerIsA: true\r\n\t\t})\r\n\t}\r\n\r\n\thandleLoadDialogue(e) {\r\n\t\t// console.log(\"success\");\r\n\t\t// console.log(e.target);\r\n\t\t// console.log(e.target.getAttribute('datatitle'));\r\n\t\tconst storedDialogue = JSON.parse(localStorage.getItem(e.target.getAttribute('datatitle')))\r\n\t\t// console.log(\"logging the storedDialogue\")\r\n\t\t// console.log(storedDialogue)\r\n\t\tthis.setState({\r\n\t\t\tsentences: storedDialogue,\r\n\t\t\tcurrentDialogueTitle: e.target.getAttribute('datatitle'),\r\n\t\t\tisViewingSavedDialogues: false,\r\n\t\t\twriteButtonStyle: 'view-toggle-button-selected',\r\n\t\t\tloadButtonStyle: 'view-toggle-button'\r\n\t\t})\r\n\t\tif (storedDialogue.length === 0) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrentSpeakerIsA: true, \r\n\t\t\t})\r\n\t\t} else if (storedDialogue[storedDialogue.length-1].speaker === \"B\") {\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrentSpeakerIsA: true, \r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrentSpeakerIsA: false,\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// focusInputOnLoad();\r\n\t}\r\n\r\n\thandleDeleteDialogue(e) {\r\n\t\t// console.log(\"you deleted a dialogue.\")\r\n\t\t// 1. this function needs to delete from dialogues list\r\n\t\t\t// call the list of dialogues\r\n\t\t\t// turn it into an array\r\n\t\t\t// use .filter to remove the index when datatitle matches\r\n\t\t\t// return it to a string\r\n\t\t\t// setState = to the new string\r\n\t\t\t// dialogueTitleList is what we are setting state on\r\n\t\t// console.log(e.target.getAttribute('datatitle'))\r\n\t\tconst thisDialogueTitle = e.target.getAttribute('datatitle')\r\n\t\t// console.log(thisDialogueTitle);\r\n\t\t// console.log(this.state.dialogueTitleList)\r\n\t\tconst currentDialogueList = this.state.dialogueTitleList.split(', ');\r\n\t\t// console.log(currentDialogueList)\r\n\t\tconst updatedDialogueList = currentDialogueList.filter((dialogue) => {\r\n\t\t\tif (!(dialogue === e.target.getAttribute('datatitle'))) {\r\n\t\t\t\treturn dialogue\r\n\t\t\t}\r\n\t\t});\r\n\t\t// console.log(\"this is your updated dialogue list\")\r\n\t\t// console.log(updatedDialogueList)\r\n\t\tconst updatedDialogueString = updatedDialogueList.join(', ')\r\n\t\t// console.log(updatedDialogueList[0])\r\n\t\tif (updatedDialogueList[0] === undefined) {\r\n\t\t\tlocalStorage.removeItem(thisDialogueTitle)\r\n\t\t\tlocalStorage.removeItem('dialogue_list')\r\n\t\t} else {\r\n\t\t\tlocalStorage.removeItem(thisDialogueTitle)\r\n\t\t\tlocalStorage.setItem('dialogue_list', updatedDialogueString)\r\n\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tdialogueTitleList: localStorage.getItem('dialogue_list'),\r\n\t\t\tnumberOfDialogues: this.state.numberOfDialogues - 1\r\n\t\t})\r\n\t\t// localStorage.setItem('dialogue_list', updatedDialogues)\r\n\t\t// console.log(localStorage.getItem('dialogue_list'))\r\n\t\t// this.setState({\r\n\t\t// \tdialogueTitleList: updatedDialogues\r\n\t\t// })\r\n\t\t// this.setState({\r\n\t\t// \tdialogueTitleList: updatedDialogues\r\n\t\t// })\r\n\r\n\r\n\t\t// 2. and also delete the actual dialogue in storage\r\n\t\t\t// take the datatitle\r\n\t\t\t// use it to directly remove that dialogue from storage\r\n\t\t\t// we should be able to keep storage clean, too\r\n\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tif (!this.state.isViewingSavedDialogues) {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"appContainer\">\r\n\t\t\t\t\t<Header />\r\n\t\t\t\t\t<ToggleViewButtons \r\n\t\t\t\t\t\twriteButtonStyle={this.state.writeButtonStyle}\r\n\t\t\t\t\t\tloadButtonStyle={this.state.loadButtonStyle}\r\n\t\t\t\t\t\tonWritingViewClick={this.handleSwitchToWritingView}\r\n\t\t\t\t\t\tonSavedDialogueViewClick={this.handleSwitchToSavedDialoguesView}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<InputContainer \r\n\t\t\t\t\t\tcurrentDialogueTitle={this.state.currentDialogueTitle}\r\n\t\t\t\t\t\tcurrentSpeakerText={this.state.currentSpeakerText}\r\n\t\t\t\t\t\tcurrentSpeakerIsA={this.state.currentSpeakerIsA}\r\n\t\t\t\t\t\tonCurrentSpeakerTyping={this.handleCurrentSpeakerTyping}\r\n\t\t\t\t\t\tonSwitchSpeaker={this.handleSwitchSpeaker}\r\n\t\t\t\t\t\tonGiveDialogueTitle={this.handleGiveDialogueTitle}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<DialogueContainer\r\n\t\t\t\t\t\tsentences={this.state.sentences}\r\n\t\t\t\t\t\tcurrentDialogueTitle={this.state.currentDialogueTitle}\r\n\t\t\t\t\t\tcurrentSpeakerText={this.state.currentSpeakerText}\r\n\t\t\t\t\t\tcurrentSpeakerIsA={this.state.currentSpeakerIsA}\r\n\t\t\t\t\t\tnumberOfDialogues={this.state.numberOfDialogues}\r\n\t\t\t\t\t\tonSaveDialogue={this.handleSaveDialogue}\r\n\t\t\t\t\t\tonClearDialogue={this.handleClearDialogue}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t); \r\n\t\t} else {\r\n\t\t\treturn(\r\n\t\t\t\t<div className=\"appContainer\">\r\n\t\t\t\t\t<Header />\r\n\t\t\t\t\t<ToggleViewButtons \r\n\t\t\t\t\t\twriteButtonStyle={this.state.writeButtonStyle}\r\n\t\t\t\t\t\tloadButtonStyle={this.state.loadButtonStyle}\r\n\t\t\t\t\t\tonWritingViewClick={this.handleSwitchToWritingView}\r\n\t\t\t\t\t\tonSavedDialogueViewClick={this.handleSwitchToSavedDialoguesView}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<SavedDialogueList \r\n\t\t\t\t\t\tonLoadDialogue={this.handleLoadDialogue}\r\n\t\t\t\t\t\tonDeleteDialogue={this.handleDeleteDialogue}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nfunction checkExistingLocalStorage() {\r\n\t\tconsole.log(\"checking existing local storage\")\r\n\t\treturn localStorage.getItem('dialogue_list');\r\n\t}\r\n\r\nconst existingStorage = checkExistingLocalStorage();\r\n\r\nfunction handleFindNumberOfDialogues() {\r\n\tconsole.log(\"checking for dialogues list\")\r\n\t// console.log(localStorage.getItem('dialogue_list'))\r\n\t// console.log(localStorage.getItem('dialogue_list').split(', '))\r\n\t// // const dialogues = localStorage.getItem('dialogue_list').split(', ')\r\n\t// // console.log(dialogues.length)\r\n\t// // return dialogues.length\r\n\tif (localStorage.getItem('dialogue_list') !== null) {\r\n\t\t\tconst dialogues = localStorage.getItem('dialogue_list').split(', ')\r\n\t\t\tconsole.log(dialogues.length)\r\n\t\t\treturn dialogues.length\r\n\t\t} else {\r\n\t\t\tlet dialoguesLength = 0;\r\n\t\t\treturn dialoguesLength;\r\n\t\t}\r\n}\r\n\r\nconst numberOfDialogues = handleFindNumberOfDialogues();\r\n\r\nReactDom.render(\r\n\t<AppContainer\r\n\t\t// checkExistingLocalStorage={checkExistingLocalStorage}\r\n\t\texistingStorage={existingStorage}\r\n\t\tnumberOfDialogues={numberOfDialogues}\r\n\t/>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// function focusInputOnLoad() {\r\n// \tconst currentSpeakerInput = document.getElementById('currentSpeakerInput');\r\n// \tcurrentSpeakerInput.focus()\r\n// }\r\n\r\n// focusInputOnLoad();\r\n\r\n\r\n"],"sourceRoot":""}